
import { useState } from "react";
import { Menu, X, Newspaper, Globe, ChevronDown } from "lucide-react";
import SearchBar from "./SearchBar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface HeaderProps {
  onCategoryChange: (category: string) => void;
  selectedCategory: string;
  onLanguageChange: (language: string) => void;
  selectedLanguage: string;
}

const Header = ({ onCategoryChange, selectedCategory, onLanguageChange, selectedLanguage }: HeaderProps) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  // Êâ©Â±ïAIÂ§ßÊ®°ÂûãÂàÜÁ±ªÔºåÂ¢ûÂä†AIÁªòÁîª„ÄÅAIËßÜÈ¢ë„ÄÅAIÁºñÁ®ã
  const getCategories = () => {
    if (selectedLanguage === 'en') {
      return [
        "All", 
        "Large Language Models", 
        "AI Agents", 
        "Multimodal AI", 
        "AI Training Technology", 
        "AI Applications & Products", 
        "AI Industry News",
        "AI Art Generation",
        "AI Video",
        "AI Programming"
      ];
    } else if (selectedLanguage === 'ja') {
      return [
        "„Åô„Åπ„Å¶", 
        "Â§ßË¶èÊ®°Ë®ÄË™û„É¢„Éá„É´", 
        "AI„Ç®„Éº„Ç∏„Çß„É≥„Éà", 
        "„Éû„É´„ÉÅ„É¢„Éº„ÉÄ„É´AI", 
        "AIË®ìÁ∑¥ÊäÄË°ì", 
        "AI„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÉªË£ΩÂìÅ", 
        "AIÊ•≠Áïå„Éã„É•„Éº„Çπ",
        "AIÁîªÂÉèÁîüÊàê",
        "AIÂãïÁîª",
        "AI„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞"
      ];
    } else if (selectedLanguage === 'ko') {
      return [
        "Ï†ÑÏ≤¥", 
        "ÎåÄÍ∑úÎ™® Ïñ∏Ïñ¥ Î™®Îç∏", 
        "AI ÏóêÏù¥Ï†ÑÌä∏", 
        "Î©ÄÌã∞Î™®Îã¨ AI", 
        "AI ÌõàÎ†® Í∏∞Ïà†", 
        "AI Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î∞è Ï†úÌíà", 
        "AI ÏóÖÍ≥Ñ Îâ¥Ïä§",
        "AI Í∑∏Î¶º ÏÉùÏÑ±",
        "AI ÎπÑÎîîÏò§",
        "AI ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç"
      ];
    } else {
      return [
        "ÂÖ®ÈÉ®", 
        "Â§ßËØ≠Ë®ÄÊ®°Âûã", 
        "AIÊô∫ËÉΩ‰Ωì", 
        "Â§öÊ®°ÊÄÅAI", 
        "AIËÆ≠ÁªÉÊäÄÊúØ", 
        "AIÂ∫îÁî®‰∫ßÂìÅ", 
        "AIË°å‰∏öÂä®ÊÄÅ",
        "AIÁªòÁîª",
        "AIËßÜÈ¢ë",
        "AIÁºñÁ®ã"
      ];
    }
  };

  const categories = getCategories();

  const languages = [
    { code: "zh", name: "‰∏≠Êñá", flag: "üá®üá≥" },
    { code: "en", name: "English", flag: "üá∫üá∏" },
    { code: "ja", name: "Êó•Êú¨Ë™û", flag: "üáØüáµ" },
    { code: "ko", name: "ÌïúÍµ≠Ïñ¥", flag: "üá∞üá∑" }
  ];

  const currentLanguage = languages.find(lang => lang.code === selectedLanguage) || languages[0];

  const getHeaderTitle = () => {
    if (selectedLanguage === 'en') return "AI LLM News";
    if (selectedLanguage === 'ja') return "AIÂ§ßË¶èÊ®°Ë®ÄË™û„É¢„Éá„É´„Éã„É•„Éº„Çπ";
    if (selectedLanguage === 'ko') return "AI ÎåÄÍ∑úÎ™® Ïñ∏Ïñ¥ Î™®Îç∏ Îâ¥Ïä§";
    return "AIÂ§ßÊ®°ÂûãËµÑËÆØ";
  };

  const getHeaderSubtitle = () => {
    if (selectedLanguage === 'en') return "Professional AI Large Language Model News Platform";
    if (selectedLanguage === 'ja') return "Â∞ÇÈñÄAIÂ§ßË¶èÊ®°Ë®ÄË™û„É¢„Éá„É´„Éã„É•„Éº„Çπ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†";
    if (selectedLanguage === 'ko') return "Ï†ÑÎ¨∏ AI ÎåÄÍ∑úÎ™® Ïñ∏Ïñ¥ Î™®Îç∏ Îâ¥Ïä§ ÌîåÎû´Ìèº";
    return "‰∏ì‰∏öAIÂ§ßËØ≠Ë®ÄÊ®°ÂûãÊñ∞ÈóªÂπ≥Âè∞";
  };

  const getMoreCategoriesText = () => {
    if (selectedLanguage === 'en') return "More Categories";
    if (selectedLanguage === 'ja') return "„Åù„ÅÆ‰ªñ„ÅÆ„Ç´„ÉÜ„Ç¥„É™";
    if (selectedLanguage === 'ko') return "Îçî ÎßéÏùÄ Ïπ¥ÌÖåÍ≥†Î¶¨";
    return "Êõ¥Â§öÂàÜÁ±ª";
  };

  const getLanguageSelectorText = () => {
    if (selectedLanguage === 'en') return "Language";
    if (selectedLanguage === 'ja') return "Ë®ÄË™ûÈÅ∏Êäû";
    if (selectedLanguage === 'ko') return "Ïñ∏Ïñ¥ ÏÑ†ÌÉù";
    return "ËØ≠Ë®ÄÈÄâÊã©";
  };

  return (
    <header className="bg-slate-900/95 backdrop-blur-md border-b border-slate-700/50 sticky top-0 z-50 shadow-lg">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          {/* Logo */}
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-lg shadow-lg">
              <Newspaper className="h-6 w-6 text-white" />
            </div>
            <div className="flex flex-col">
              <span className="text-xl font-bold text-white">{getHeaderTitle()}</span>
              <span className="text-xs text-slate-400 hidden sm:block">{getHeaderSubtitle()}</span>
            </div>
          </div>

          {/* Desktop Navigation */}
          <div className="hidden lg:flex items-center space-x-6">
            <SearchBar />
            
            {/* Categories */}
            <nav className="flex space-x-1">
              {categories.slice(0, 4).map((category) => (
                <Button
                  key={category}
                  onClick={() => onCategoryChange(category)}
                  variant={selectedCategory === category ? "default" : "ghost"}
                  size="sm"
                  className={`transition-all duration-200 text-xs ${
                    selectedCategory === category
                      ? 'bg-blue-600 text-white shadow-md'
                      : 'text-slate-300 hover:text-white hover:bg-slate-800'
                  }`}
                >
                  {category}
                </Button>
              ))}
              
              {/* More Categories Dropdown */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="sm" className="text-slate-300 hover:text-white hover:bg-slate-800 text-xs">
                    {getMoreCategoriesText()} <ChevronDown className="ml-1 h-3 w-3" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="bg-slate-800 border-slate-700">
                  {categories.slice(4).map((category) => (
                    <DropdownMenuItem
                      key={category}
                      onClick={() => onCategoryChange(category)}
                      className="text-slate-300 hover:text-white hover:bg-slate-700 cursor-pointer"
                    >
                      {category}
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </nav>

            {/* Language Selector */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="bg-slate-800 border-slate-600 text-slate-300 hover:bg-slate-700 hover:text-white">
                  <Globe className="h-4 w-4 mr-2" />
                  <span className="mr-1">{currentLanguage.flag}</span>
                  <span className="hidden sm:inline">{currentLanguage.name}</span>
                  <ChevronDown className="ml-1 h-3 w-3" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="bg-slate-800 border-slate-700">
                {languages.map((language) => (
                  <DropdownMenuItem
                    key={language.code}
                    onClick={() => onLanguageChange(language.code)}
                    className="text-slate-300 hover:text-white hover:bg-slate-700 cursor-pointer"
                  >
                    <span className="mr-2">{language.flag}</span>
                    {language.name}
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          {/* Mobile Menu Button */}
          <button
            className="lg:hidden text-white p-2 hover:bg-slate-800 rounded-lg transition-colors"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
          </button>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="lg:hidden py-4 border-t border-slate-700/50 space-y-4">
            <SearchBar />
            
            {/* Mobile Language Selector */}
            <div className="flex items-center justify-between">
              <span className="text-slate-300 text-sm font-medium">{getLanguageSelectorText()}</span>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm" className="bg-slate-800 border-slate-600 text-slate-300">
                    <span className="mr-2">{currentLanguage.flag}</span>
                    {currentLanguage.name}
                    <ChevronDown className="ml-1 h-3 w-3" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="bg-slate-800 border-slate-700">
                  {languages.map((language) => (
                    <DropdownMenuItem
                      key={language.code}
                      onClick={() => onLanguageChange(language.code)}
                      className="text-slate-300 hover:text-white hover:bg-slate-700 cursor-pointer"
                    >
                      <span className="mr-2">{language.flag}</span>
                      {language.name}
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>

            {/* Mobile Categories */}
            <nav className="grid grid-cols-2 gap-2">
              {categories.map((category) => (
                <Button
                  key={category}
                  onClick={() => {
                    onCategoryChange(category);
                    setIsMenuOpen(false);
                  }}
                  variant={selectedCategory === category ? "default" : "ghost"}
                  size="sm"
                  className={`justify-start text-xs ${
                    selectedCategory === category
                      ? 'bg-blue-600 text-white'
                      : 'text-slate-300 hover:text-white hover:bg-slate-800'
                  }`}
                >
                  {category}
                </Button>
              ))}
            </nav>
          </div>
        )}
      </div>
    </header>
  );
};

export default Header;
